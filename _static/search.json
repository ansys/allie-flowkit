[{"objectID":"Home","href":"advanced/api_reference.html#api-reference","title":"API Reference","text":"API Reference\n\nThis page is a placeholder for auto-generated API documentation in development."},{"objectID":"Home","href":"getting-started/setup.html#setup","title":"Setup","text":"Setup\n\nThis section guides you through installing, building, and running the Flowkit GRPC server, and connecting to it from the AALI Agent.\n\nPrerequisites\n\nGo 1.20+ installed on your system.\n\ngit for cloning repositories.\n\n(Optional but recommended) A working GOPATH and Go module support enabled.\n\nInstall Flowkit\n\nClone the Flowkit repository and navigate to the directory:\n\nDownload Go dependencies (if needed):\n\nBuild the Server\n\nBuild the Go binary:\n\nIf you encounter build errors, ensure you have the correct Go version and run go mod tidy to install dependencies.\n\nRun the Server\n\nStart the GRPC server by executing the built binary:\n\nBy default, the server listens on port 50051.\n\nVerifying the Server:\nOn successful startup, you should see a message similar to:\n\nIf you encounter errors, check that the port is available and dependencies are up to date.\n\nAgent Connection\n\nOnce running, Flowkit accepts GRPC requests from the AALI Agent or any GRPC-compatible client.\n\nEnsure the function name and input parameters match expected definitions in your workflow.\n\nAvailable methods are defined in pkg/externalfunctions/externalfunctions.go.\n\nThe server responds with a result or a streamed set of messages.\n\nNext Steps"},{"objectID":"Home","href":"user-guide/slash_commands.html#slash-commands","title":"Slash Commands","text":"Slash Commands\n\nSlash Command Handling\n\nFlowkit itself does not handle raw slash commands like /reset or /summary.\n\nThese commands are parsed and interpreted by the AALI Agent or client application.\nThe agent then converts them into valid GRPC function calls and sends them to Flowkit.\n\nWhere to look:\n- The logic for parsing slash commands and mapping them to function calls lives in the Agent (see the Agent repository for implementation details).\n\nFunction Dispatching\n\nFlowkit receives normal GRPC requests where:\n\nfunction contains the name of a registered function (e.g. reset_session)\n\ninput includes any parameters from the slash command\n\nNo special syntax like / is interpreted at the Flowkit level\n\nExample:\nThe slash command /reset becomes a GRPC call:\n\nUsage Context\n\nSlash commands are often used in:\n\nDeveloper tooling or chat interfaces\n\nAALI Agent workflows for fast operator actions\n\nAutomating tasks like session resets or translations\n\nOnce invoked, Flowkit executes the registered function as a standard GRPC request."},{"objectID":"Home","href":"index.html#aali-flowkit-documentation","title":"AALI Flowkit Documentation","text":"AALI Flowkit Documentation\n\nAALI Flowkit is the core toolbox of the AALI system. It exposes a GRPC server and provides a framework for defining, registering, and executing external functions.\n\n\n\n Getting Started\n\nInstall Flowkit, start the GRPC server, and run your first external function.\n\ngetting-started/index\n\n User Guide\n\nRegister functions, trace execution, and use the FlowContext system.\n\nuser-guide/index\n\n Advanced Topics\n\nExplore GRPC APIs, protofile structure, and agent integration.\n\nadvanced/index\n\n"},{"objectID":"Home","href":"user-guide/overview.html#overview","title":"Overview","text":"Overview\n\nFlowkit Overview\n\nFlowkit is the GRPC-based execution engine behind the AALI system. It allows services to call external functions over the network using a simple GRPC interface. Each function is registered at startup and can be invoked remotely with or without stream support.\n\nResponsibilities:\n\nRun as a standalone GRPC server\n\nExpose registered external functions for agent access\n\nHandle session context and runtime tracking\n\nPower execution flow in agent conversations\n\nBuilt in Go, Flowkit is modular, fast, and easy to extend. New functionality can be plugged in via simple function registration."},{"objectID":"Home","href":"advanced/protofiles.html#proto-definitions","title":"Proto Definitions","text":"Proto Definitions\n\nShared Contracts\n\nAll GRPC services in AALI — including Flowkit and Agent — rely on shared .proto files.\nThese define:\n\nFunction call request/response format\n\nStream interfaces\n\nService method signatures\n\nExample Snippet\n\nExample from proto/externalfunctions.proto:\n\nLocation & Usage\n\nThe .proto files are located in the proto/ directory of the aali-sharedtypes repository.\n\nTo regenerate Go types:\n\nThis ensures consistent typing for services written in Go, Python, or other supported languages."},{"objectID":"Home","href":"user-guide/index.html#user-guide","title":"User Guide","text":"User Guide\n\nFlowkit’s core features: how to register functions, manage input/output, invoke commands, and connect to the Agent.\n\n\n\n Overview\n\nHigh-level overview of how Flowkit fits into the AALI system.\n\noverview\n\n Function Registration\n\nRegister and expose functions with metadata.\n\nfunction_registration\n\n Execution Context\n\nManage input, output, and runtime values.\n\nmemory\n\n Calling Functions\n\nInvoke functions with RunFunction and StreamFunction.\n\ncalling\n\n Slash Commands\n\nUse developer commands.\n\nslash_commands\n\n Agent Integration\n\nUnderstand how the Agent receives and responds to function calls.\n\nagent_integration\n\n Exposed Variables\n\nShare data across workflow steps using key-value inputs.\n\nexposed_variables\n\n"},{"objectID":"Home","href":"getting-started/index.html#getting-started","title":"Getting Started","text":"Getting Started\n\nThis section explains how to install and run AALI Flowkit locally.\n\n Installation\n\nInstall Flowkit from source or using Docker.\n\nsetup\n\n Run the Server\n\nStart the Flowkit GRPC server and verify it’s running.\n\nserver\n\n"},{"objectID":"Home","href":"user-guide/memory.html#execution-context","title":"Execution Context","text":"Execution Context\n\nThis section describes the environment and conventions when writing functions for Flowkit, including the context object, parameter handling, and state management best practices.\n\nContext Object\n\nEvery function in Flowkit receives a context.Context object as the first parameter.\nThis object provides:\n\nCancellation propagation (for timeouts or aborted workflows)\n\nDeadlines and timeouts (set upstream)\n\nRequest-scoped values and metadata\n\nUse the context object to:\n- Enforce execution limits\n- Access request metadata (e.g., user/session) if needed\n\nExample usage:\n\nInput and Output Handling\n\nFunctions in Flowkit define typed arguments (not just map[string]interface{}):\n\nWhen invoked over GRPC, the input arguments are mapped from the request message fields, and the outputs are returned as response fields.\n\nInput and output values should be JSON-serializable when needed (for interoperability)\n\nSee pkg/externalfunctions/externalfunctions.go and the proto definitions for details.\n\nLogs and debug output can be returned as part of the response if desired.\n\nState and Session Context\n\nBy default, each function call is stateless and idempotent.\nFlowkit does not persist in-memory state across calls.\n\nTo manage state or share data across workflow steps:\n- Use input/output variables via the GRPC maps (see Exposed Variables)\n- For more advanced use cases, connect to external databases, caches, or file systems.\n\nBest Practice:\nTreat each function as independent and stateless unless explicit session context is required.\n\nMore Information\n\nSee proto/externalfunctions.proto for message details\n\nFor input/output conventions, review sample functions in pkg/externalfunctions/\n\nFor workflow session context, see Exposed Variables"},{"objectID":"Home","href":"advanced/grpc.html#grpc-server--api","title":"GRPC Server & API","text":"GRPC Server & API\n\nGRPC Service Interface\n\nFlowkit exposes a GRPC service for external function execution:\n\nCallFunction — Executes a function and returns a single response.\n\nCallFunctionStream — Executes a stream-capable function and returns a streaming response.\n\nListFunctions — Returns metadata about all registered functions.\n\nThese methods are available to the AALI Agent and any GRPC-compatible client.\n\nProto Contract\n\nThe GRPC service and message formats are defined in the proto/externalfunctions.proto file, shared via the aali-sharedtypes repository.\n\nExample service definition:\n\nRequest and response messages include fields for the function name, input arguments, outputs, and errors.\n\nThese proto definitions are shared by both Flowkit and the AALI Agent."},{"objectID":"Home","href":"getting-started/server.html#flowkit-grpc-server","title":"Flowkit GRPC Server","text":"Flowkit GRPC Server\n\nThis guide explains how to run the Flowkit GRPC server (locally or with Docker), verify that it’s operational, and understand its integration pattern for handling external function requests.\n\nRun Server Locally\n\nAfter building the binary, start the GRPC server with:\n\nBy default, the server listens on port 50051.\n\nIf you see an error, check that no other process is using the port and that the build succeeded.\n\nRun with Docker\n\nIf your repository includes a Dockerfile, you can run Flowkit with:\n\nThis will start the GRPC service at localhost:50051.\n\nPrerequisite:\nEnsure Docker is installed and running on your system.\n\nTest GRPC Connection (grpcurl)\n\nTo verify that the server is running, use [grpcurl](https://github.com/fullstorydev/grpcurl`):\n\nInstall grpcurl (if not already installed):\n\nOr use Homebrew on macOS:\n\nList available GRPC services:\n\nExpected Output:\n\nIf you do not see these, ensure the server is running and listening on the correct port.\n\nTroubleshooting:\n- If you see a connection error, check that Flowkit is running and the port is not blocked.\n- If the method list is empty, ensure you have registered your functions correctly in pkg/externalfunctions/externalfunctions.go.\n\nIntegration Pattern\n\nFlowkit operates as a standalone GRPC service and typically connects to:\n\nThe AALI Agent, which dispatches function requests\n\nExternal tools or developers via GRPC clients (such as grpcurl)\n\nWhen running, any registered function in externalfunctions.go becomes callable over GRPC."},{"objectID":"Home","href":"user-guide/agent_integration.html#agent-integration","title":"Agent Integration","text":"Agent Integration\n\nThis section explains how the AALI Agent communicates with Flowkit over GRPC and provides practical guidance for integration and debugging.\n\nCommunication Overview\n\nThe AALI Agent connects to Flowkit via GRPC to execute workflow steps. For each step, the Agent can invoke one or more registered functions.\n\nCall sequence:\n\nAgent selects a function to invoke\n\nSends a GRPC request with input arguments\n\nFlowkit executes the function and returns a response\n\nAgent processes the result and continues the workflow\n\nBoth synchronous and streaming (multi-response) functions are supported.\n\nProto Definitions & Available Methods\n\nAll available methods are defined in pkg/externalfunctions/externalfunctions.go.\n\nThe GRPC service interface is defined in the proto/externalfunctions.proto file.\n\nExample function call (from the Agent’s perspective):\n\nSee the proto file for request/response message details.\n\nAgent Configuration Example\n\nTo connect the Agent to a running Flowkit instance, set the Flowkit GRPC endpoint in the Agent’s configuration file or environment variables.\n\nExample config (YAML):\n\nOr set the environment variable:\n\nDirect GRPC Access & Debugging\n\nAny client can interact with Flowkit using its GRPC API (not just the Agent):\n\nUse grpcurl, custom scripts, or test clients for debugging and development.\n\nExample (list available services):\n\nFor troubleshooting connection errors, check that:\n- The server is running and reachable on the configured port\n- The proto file matches the running Flowkit server version"},{"objectID":"Home","href":"user-guide/calling.html#calling-registered-functions","title":"Calling Registered Functions","text":"Calling Registered Functions\n\nThis section explains how to invoke registered functions in Flowkit using the GRPC API, with examples for both synchronous and streaming calls.\n\nFunction Invocation Methods\n\nRegistered functions can be called using the GRPC API. Two primary methods are provided by the ExternalFunctionService:\n\nCallFunction: Executes a function and returns a single response.\n\nCallFunctionStream: Executes a function and returns a stream of responses.\n\nThese modes support both synchronous and real-time scenarios.\n\nExample usage with [grpcurl](https://github.com/fullstorydev/grpcurl):\n\nRequest and Response Format\n\nRequest (FunctionCallRequest):\n\nfunction: Name of the registered function (string)\n\ninput: Key-value map of function arguments (object)\n\nsession_id: (optional) Session identifier (string)\n\nuser: (optional) User ID (string)\n\nResponse (FunctionCallResponse):\n\noutput: Function result or stream output\n\nlogs: Structured log messages (optional)\n\nerror: Error message if function fails\n\nSee proto/externalfunctions.proto for exact message structure.\n\nNote:\nFor a list of available functions, see pkg/externalfunctions/externalfunctions.go.\nIf you call a function that is not registered, you will receive an error in the response.\n\nExample error response:"},{"objectID":"Home","href":"user-guide/function_registration.html#function-registration","title":"Function Registration","text":"Function Registration\n\nThis section explains how to add and register new functions in Flowkit so they are available for external calls via the GRPC API.\n\nAdding a New Function\n\nTo expose a new function in Flowkit:\n\nDefine your function in the appropriate package inside pkg/externalfunctions/.\n\nInclude a `displayName` tag in the comments for UI integration.\n\nExample:\n\nRegister the Function in the Registry\n\nRegister the function in pkg/externalfunctions/externalfunctions.go by adding it to the ExternalFunctionsMap:\n\nThe key is the function name (as called from the agent), and the value is the Go function.\n\nNote:\nAll functions must be registered here to be available via GRPC.\n\nFunction Signature Requirements\n\nAll registered functions must use standard Go signatures (see examples in externalfunctions/).\n\nFor advanced features like streaming responses, consult the proto definition and core implementation. Most functions are single-response by default.\n\nFor more details, see the main README section:\nAdding New Functions, Types, and Categories"},{"objectID":"Home","href":"advanced/index.html#advanced-topics","title":"Advanced Topics","text":"Advanced Topics\n\nArchitectural features, extensibility patterns, and tools available in the Flowkit.\n\n GRPC Server & API\n\nUnderstand the exposed endpoints and communication model of Flowkit’s GRPC server.\n\ngrpc\n\n Proto Definitions\n\nShared .proto files and service contracts used across AALI.\n\nprotofiles\n\n Troubleshooting\n\nGRPC issues, agent response problems, or function misconfigurations.\n\ntroubleshooting\n\n API Reference\n\nExplore public types, interfaces, and exposed Go symbols.\n\napi_reference\n\n"},{"objectID":"Home","href":"advanced/troubleshooting.html#common-issues","title":"Common Issues","text":"Common Issues\n\nGRPC Endpoint Not Responding\n\nIf grpcurl or any client fails to connect:\n\nEnsure Flowkit is running and listening on :50051\n\nIf using Docker, confirm the port is mapped with -p 50051:50051\n\nCheck firewall or network rules are not blocking access\n\nReview Flowkit logs for any startup or bind errors\n\n“function not registered” Error\n\nThis error means the function name in your GRPC request is not registered in Flowkit.\n\nVerify your function is added to ExternalFunctionsMap in pkg/externalfunctions/externalfunctions.go\n\nThe key in the map must exactly match the name sent in your request\n\nSave and rebuild the Flowkit binary after adding new functions\n\nExample error response:\n\nEmpty or Broken Streaming Output\n\nIf a streaming call returns no data or ends early:\n\nEnsure your function supports streaming (see proto and implementation for correct signature)\n\nMake sure the function is correctly mapped in ExternalFunctionsMap\n\nUse logs to verify data is being generated and sent\n\nIf streaming support is not yet implemented for your function, fallback to single-response mode.\n\nAgent Doesn’t Respond\n\nIf Flowkit forwards calls to the Agent and nothing happens:\n\nVerify the Agent is running and its address is configured correctly\n\nCheck both Agent and Flowkit logs for errors\n\nEnsure your GRPC input includes all required fields for the Agent logic\n\nConfirm version compatibility between Flowkit and Agent\n\nStill Stuck?\n\nReview logs in logs/ or console output for error messages\n\nConfirm your proto definitions match between client and server\n\nSee the README or Setup for environment troubleshooting tips"},{"objectID":"Home","href":"user-guide/exposed_variables.html#exposed-variables","title":"Exposed Variables","text":"Exposed Variables\n\nThis section explains how to share variables across workflow steps in Flowkit using the GRPC input and output maps, with examples of scoping and usage in Go.\n\nVariable Sharing Across Steps\n\nWorkflows often need to reuse values across nodes.\nFlowkit supports passing key-value pairs between steps using the GRPC input and output maps.\n\nExample:\n- Function A extracts a value and outputs {\"customer_id\": \"123\"}\n- Function B receives this value as part of its input in the same session\n\nVariables are available to all functions within a single workflow session.\n\nKey Scoping & Reserved Keys\n\nVariables are scoped per session.\nThe same key can exist in different sessions without conflict.\n\nReserved keys (automatically set by the AALI Agent):\n- __user: The current user identifier\n- __session: The session ID for the workflow execution\n- __workflow: The workflow ID\n\nThese keys are injected into each function request for tracking and audit purposes.\n\nNote:\nAvoid overwriting reserved keys, as they may be required for session continuity and security.\n\nAccess Pattern in Go\n\nAccess input variables using Go map syntax in your function implementation.\n\nSet output variables using the Flowkit response format:\n\nFor full proto definitions, see proto/externalfunctions.proto.\n\nExample: Multi-Step Workflow\n\nStep 1: Extract a variable\n\nStep 2: Consume the variable\n\nAll variable passing is handled automatically by the workflow session context."}]