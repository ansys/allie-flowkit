name: Aali Release
on:
  push:
    tags:
      - "*"

env:
  DOCUMENTATION_CNAME: 'ansys.github.io/aali-flowkit'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

# ---------------------------------------------------------------------
# CHECK TAG BRANCH  ── check if tag is on main branch
# ---------------------------------------------------------------------
  check-tag-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag is on main branch and delete if not
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          BRANCH=$(git branch -r --contains ${{ github.ref }} | grep 'origin/main' || echo '')

          if [ -z "$BRANCH" ]; then
            echo "❌ Tag $TAG_NAME was not added to the main branch. Deleting tag and exiting."
            git push origin --delete $TAG_NAME
            echo "Tag $TAG_NAME has been deleted."
            exit 0  # Exit successfully to avoid workflow failure notification
          else
            echo "Tag is on main branch. Continuing workflow."
          fi

# ---------------------------------------------------------------------
# BUILD DOCS  ── build documentation
# ---------------------------------------------------------------------
  docs-build:
    name: Build Documentation
    needs: [check-tag-branch]
    uses: "./.github/workflows/docs_build.yml"
    with:
      name: "Build Documentation"
    secrets: inherit

# ---------------------------------------------------------------------
# RELEASE DOCKER ── publish Docker image to GitHub Container Registry
# ---------------------------------------------------------------------
  release-docker:
    name : Generate Docker release
    needs: [check-tag-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag name contains 'dev'
        run: echo "IS_DEV_TAG=$(echo ${{ github.ref_name }} | grep -q 'dev' && echo 'true' || echo 'false')" >> $GITHUB_ENV

      - name: Decompose tag into components
        if: env.IS_DEV_TAG == 'false'
        run: |
          if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Split the tag into its components
            IFS='.' read -ra PARTS <<< "${{ github.ref_name }}"
            echo "X=${PARTS[0]}" >> $GITHUB_ENV
            echo "Y=${PARTS[1]}" >> $GITHUB_ENV
            echo "Z=${PARTS[2]}" >> $GITHUB_ENV
          else
            echo "Invalid tag format. Expected vX.Y.Z but got ${{ github.ref_name }}"
            exit 1
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        if: env.IS_DEV_TAG == 'false'
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            GITHUB_TOKEN=${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.X }} ,
            ghcr.io/${{ github.repository }}:${{ env.X }}.${{ env.Y }} ,
            ghcr.io/${{ github.repository }}:${{ env.X }}.${{ env.Y }}.${{ env.Z }} ,
            ghcr.io/${{ github.repository }}:latest

      - name: Build and push Docker image dev
        if: env.is_dev_tag == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            GITHUB_TOKEN=${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

# ---------------------------------------------------------------------
# BUILD BINARIES  ── build binaries for Linux, Windows & macOS
# ---------------------------------------------------------------------
  build:
    name: Create binaries for Linux, Windows & macOS
    needs: [check-tag-branch]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ── Linux
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            platform: linux_amd64
            ext: ""
            container: null
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            platform: linux_arm64
            ext: ""
            container: null
          # ── Linux (Rocky Linux compatible)
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            platform: rocky8_amd64
            ext: ""
            container: rockylinux
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            platform: rocky8_arm64
            ext: ""
            container: rockylinux
          # ── Windows
          - os: windows-latest
            goos: windows
            goarch: amd64
            platform: windows_amd64
            ext: ".exe"
            container: null
          - os: windows-latest
            goos: windows
            goarch: arm64
            platform: windows_arm64
            ext: ".exe"
            container: null
          # ── macOS
          - os: macos-latest
            goos: darwin
            goarch: amd64
            platform: macos_amd64
            ext: ""
            container: null
          - os: macos-latest
            goos: darwin
            goarch: arm64
            platform: macos_arm64
            ext: ""
            container: null

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        if: matrix.container != 'rockylinux'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Build ${{ matrix.platform }} binary
        if: matrix.container != 'rockylinux'
        shell: bash
        env:
          GOOS:   ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -euo pipefail
          mkdir -p dist
          out="dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}${{ matrix.ext }}"
          go build -tags netgo -o "$out"

      - name: Build in Rocky Linux container
        if: matrix.container == 'rockylinux'
        run: |
          # Get Go version from go.mod
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')

          docker run --rm -v $PWD:/workspace -w /workspace rockylinux:8 bash -c "
            set -euo pipefail

            # Show Rocky Linux version
            cat /etc/rocky-release

            # Install dependencies including file command
            dnf install -y wget tar file git

            # Download AMD64 Go binary for the runner
            echo 'Installing Go version: ${GO_VERSION} (amd64 for cross-compilation)'
            wget -q \"https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz\"
            tar -C /usr/local -xzf \"go${GO_VERSION}.linux-amd64.tar.gz\"
            export PATH=/usr/local/go/bin:\$PATH

            # Verify Go installation
            go version

            # Create dist directory
            mkdir -p dist

            # Build static binary for target architecture
            echo 'Building for GOOS=linux GOARCH=${{ matrix.goarch }}'
            CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.goarch }} \\
            go build -buildvcs=false -mod=readonly -tags 'netgo osusergo' \\
              -ldflags '-extldflags \"-static\" -s -w' \\
              -o 'dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}'

            # Verify binary
            echo '=== Binary verification ==='
            file 'dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}'

            # ldd check only works for amd64 binaries on amd64 host
            if [ '${{ matrix.goarch }}' = 'amd64' ]; then
              echo '=== Checking for dynamic dependencies ==='
              ldd 'dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}' 2>/dev/null || echo 'No dynamic dependencies (static binary confirmed)'
            else
              echo '=== Cross-compiled for ${{ matrix.goarch }} - cannot run ldd on this host ==='
            fi

            echo '=== Binary size ==='
            ls -lh 'dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}'
          "

      - name: Upload ${{ matrix.platform }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}_binaries
          path: dist/${{ github.event.repository.name }}_${{ matrix.platform }}_${{ github.ref_name }}*
          if-no-files-found: error

# ---------------------------------------------------------------------
# SIGN  ── sign all Windows executables (amd64 & arm64)
# ---------------------------------------------------------------------
  sign-windows-binaries:
    name: Sign Windows binaries
    needs: [build]
    runs-on:
      group: ansys-network
      labels: [self-hosted, Windows, signtool]
    steps:
      - name: Checkout SignTool
        uses: actions/checkout@v4
        with:
          repository: ansys-internal/signtool-ansys-apps
          token: ${{ secrets.SIGNTOOL_ACCESS_TOKEN }}

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: windows_*_binaries
          path: signtool/installer

      - name: List contents
        run: ls -R signtool/installer

      - name: Create dist directory
        shell: pwsh
        run: mkdir -p signtool/installer/dist

      - name: Sign Windows executables
        working-directory: signtool
        shell: pwsh
        run: |
            # collect every .exe that came from the download‑artifact step
            $files = Get-ChildItem installer -Recurse -Filter "*.exe"

            if ($files.Count -eq 0) {
                Write-Error "❌  No Windows executables found in signtool/installer — signing aborted."
                exit 1               # → step fails → job fails → workflow fails
            }

            # Create dist directory if it doesn't exist
            if (!(Test-Path installer/dist)) {
                New-Item -ItemType Directory -Path installer/dist
            }

            foreach ($file in $files) {
                $jobname = $file.BaseName
                $destFile = "installer/dist/$($file.Name)"
                .\Ansys.SignClient.exe sign --signUrl https://csign.ansys.com -r gh_signtool_account -s '${{ secrets.SIGNTOOL_PWD }}' -n $jobname -i $file.FullName -o $file.FullName

                # Copy the signed file to the dist directory
                Copy-Item -Path $file.FullName -Destination $destFile
            }

      - name: Upload signed Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries-signed
          path: signtool/installer/dist/*
          if-no-files-found: error

# ---------------------------------------------------------------------
# RELEASE  ── publish files to GitHub
# ---------------------------------------------------------------------
  release:
    needs: [sign-windows-binaries, release-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Create a directory to collect all binaries
      - name: Create release directory
        run: mkdir -p release_files

      # Download all artifacts to the release directory
      - uses: actions/download-artifact@v4
        with:
          pattern: "*_binaries*"
          path: release_files
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: windows-binaries-signed
          path: release_files

      # Delete unsigned Windows binaries
      - name: Drop unsigned Windows binaries
        run: rm -rf release_files/windows_*_binaries

      # List all files for verification
      - name: Verify collected binaries
        run: |
          echo "▼ release_files contains:"
          find release_files -type f | sort

      # Create GitHub release with all files
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            release_files/**/${{ github.event.repository.name }}_*_${{ github.ref_name }}*

# ---------------------------------------------------------------------
# UPLOAD RELEASE DOCS ── upload release documentation to GitHub Pages
# ---------------------------------------------------------------------
  upload_docs_release:
    name: Upload release documentation
    runs-on: ubuntu-latest
    needs: [release, docs-build]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          doc-artifact-name: documentation-html-with-api

# ---------------------------------------------------------------------
# UPDATE MAIN AALI REPO ── update main aali repo and create release
# ---------------------------------------------------------------------
  main-repo-release:
    name: Update main aali repo and create release
    needs: [release, release-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout aali repository
        run: |
          git clone --branch main https://${{ secrets.PYANSYS_CI_BOT_TOKEN }}@github.com/ansys/aali.git

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'aali/scripts/releasehelper/go.mod'

      - name: Run tag script
        run: |
          cd aali/scripts/releasehelper
          go run main.go "tag" ${{ github.ref_name }} ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Commit and push to aali
        run: |
          cd aali
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git config --global user.name '${{ github.actor }}'
          git commit -a -m 'New release triggered by ${{ github.event.repository.name }}'
          git push origin main

      - name: Run release script
        run: |
          cd aali/scripts/releasehelper
          go run main.go "release" ${{ github.ref_name }} ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
